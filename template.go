package validate

var Template = `// Code generated by validate; DO NOT EDIT.
// github.com/protogodev/validate

package {{$.Data.PkgName}}

import (
	"fmt"
	"testing"
	"time"
	v "github.com/RussellLuo/validating/v3"
	{{- range $.Data.Imports}}
	{{.ImportString}}
	{{- end}}
)

{{- $qualifiedInterfaceName := (printf "%s%s" $.Data.SrcPkgQualifier $.Data.InterfaceName) }}

func ValidateMiddleware(wrap func(error) error) func({{$qualifiedInterfaceName}}) {{$qualifiedInterfaceName}} {
	return func(next {{$qualifiedInterfaceName}}) {{$qualifiedInterfaceName}} {
		if wrap == nil {
			wrap = func(err error) error {return err}
		}
		return validateMiddleware{
			next: next,
			wrap: wrap,
		}
	}
}

type validateMiddleware struct {
	next {{$qualifiedInterfaceName}}
	wrap func(error) error
}

{{- range $.Data.Methods}}
{{- $methodName := .Name}}

func (mw validateMiddleware) {{$methodName}}({{.ArgList}}) {{.ReturnArgTypeList}} {
	schema := v.Schema{
		{{- range nonCtxParams .Params}}
		v.F("{{.Name}}", {{.Name}}): {{exprString $methodName .Name .Type}},
		{{- end}}
	}

	if err := v.Validate(schema); err != nil {
		return {{returnErr .Returns "mw.wrap(%s)"}}
	}

	return mw.next.{{.Name}}({{.CallArgList}})
}
{{- end}} {{/* range $.Data.Methods */}}
`
